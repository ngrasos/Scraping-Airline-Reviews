{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9150803,"sourceType":"datasetVersion","datasetId":5527583}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/ngrasos/scrape-british-airways-reviews-with-me?scriptVersionId=192092500\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# Web Scraping\nwith *BeautifulSoup*<br><br>\n**‚ùóREAD the COMMENTS‚ùó** if you're interested in understanding the process that is","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport re\nimport time\nfrom datetime import datetime\nimport matplotlib.dates as mdates\nimport matplotlib.ticker as ticker\nfrom urllib.request import urlopen\nfrom bs4 import BeautifulSoup\nimport requests\nimport warnings\nwarnings.filterwarnings('ignore')","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Scraping AirlineQuality.com\nScraping from https://www.airlinequality.com/airline-reviews/british-airways<br><br>\n**CHANGE THE URL PAGESIZE to scrape more reviews** (pagesize = no of reviews)","metadata":{}},{"cell_type":"code","source":"import requests\nfrom bs4 import BeautifulSoup\n\n# Select url to scrape\n# CHANGE \"pagesize\" TO SCRAPE MORE REVIEWS, re-run\nurl = \"https://www.airlinequality.com/airline-reviews/british-airways/?sortby=post_date%3ADesc&pagesize=380\"\npage = requests.get(url)\n\n# Apply BeautifulSoup\nsoup = BeautifulSoup(page.content, \"html.parser\")\n\n# Keep parent block containing the reviews\nresults = soup.find('article', attrs={'class': 'comp comp_reviews-airline querylist position-content'})\n\n# Keep individual reviews within parent block\nreviews = results.find_all(\"article\", itemprop=\"review\")","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"After we find the parent elements that house each review, we can begin to identify the child elements containing its details.\n<br><br>\nIn this analysis we are interested in the following:<br>\n##### Date Published | Name | Rating | Date Flown | Seat Type | Aircraft | Cabin Staff | Seat Comfort | Food & Beverages | Route | Recommended","metadata":{}},{"cell_type":"code","source":"# Extract all relevant data \n\nreview_data = []\n\nfor article in reviews:\n    # Name, Rating, Date Published\n    name = article.find(\"span\", itemprop=\"name\").text.strip() if article.find(\"span\", itemprop=\"name\") else 'N/A'\n    rating = article.find(\"span\", itemprop=\"ratingValue\").text.strip() if article.find(\"span\", itemprop=\"ratingValue\") else 'N/A'\n    time = article.find(\"time\", itemprop=\"datePublished\").text.strip() if article.find(\"time\", itemprop=\"datePublished\") else 'N/A'\n    # Seat Type\n    seat_type_td = article.find('td', class_='review-rating-header', text='Seat Type') \n    seat_type_value = seat_type_td.find_next_sibling('td').text.strip() if seat_type_td else 'N/A'\n    # Aircraft\n    aircraft_td = article.find('td', class_='review-rating-header', text='Aircraft')\n    aircraft_value = aircraft_td.find_next_sibling('td').text.strip() if aircraft_td else 'N/A'\n    # Route\n    route_td = article.find('td', class_='review-rating-header', text='Route')\n    route_value = route_td.find_next_sibling('td').text.strip() if route_td else 'N/A'\n    # Date  Flown\n    date_flown_td = article.find('td', class_='review-rating-header', text='Date Flown')\n    date_flown_value = date_flown_td.find_next_sibling('td').text.strip() if date_flown_td else 'N/A'\n    # Recommendation\n    rec_td = article.find('td', class_='review-rating-header', text='Recommended')\n    rec_value = rec_td.find_next_sibling('td').text.strip() if rec_td else 'N/A'\n    # Cabin Staff service rating\n    cabin_staff_td = article.find('td', class_='review-rating-header', text='Cabin Staff Service')\n    if cabin_staff_td:\n        stars = cabin_staff_td.find_next_sibling('td').find_all('span', class_='star fill')\n        cabin_staff_rating = stars[-1].text.strip() if stars else 'N/A'\n    else:\n        cabin_staff_rating = 'N/A'\n    # Seat Comfort rating\n    seat_comfort_td = article.find('td', class_='review-rating-header', text='Seat Comfort')\n    if seat_comfort_td:\n        stars = seat_comfort_td.find_next_sibling('td').find_all('span', class_='star fill')\n        seat_comfort_rating = stars[-1].text.strip() if stars else 'N/A'\n    else:\n        seat_comfort_rating = 'N/A'\n    # Food & Beverages rating\n    f_and_b_td = article.find('td', class_='review-rating-header', text='Food & Beverages')\n    if f_and_b_td:\n        stars = f_and_b_td.find_next_sibling('td').find_all('span', class_='star fill')\n        f_and_b_rating = stars[-1].text.strip() if stars else 'N/A'\n    else:\n        f_and_b_rating = 'N/A'\n        \n    # Add values to columns\n    review_data.append({\n        'Date Published': time,\n        'Name': name,\n        'Rating': rating,\n        'Date Flown': date_flown_value,\n        'Seat Type': seat_type_value,\n        'Aircraft': aircraft_value,\n        'Cabin Staff': cabin_staff_rating,\n        'Seat Comfort': seat_comfort_rating,\n        'Food & Beverages': f_and_b_rating,\n        'Route': route_value,\n        'Recommended': rec_value\n    })\n\n# Create Data Frame\ndf = pd.DataFrame(review_data)\ndf.head(10)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**‚¨á Use the following block to save new data. ‚¨á** after uncommenting the second line obviously","metadata":{}},{"cell_type":"code","source":"# Save Data Frame to csv\n#df.to_csv('BA_Skytrax_2022-2024(11-August).csv', index=False, encoding='utf-8')","metadata":{"execution":{"iopub.status.busy":"2024-08-11T10:10:55.3215Z","iopub.execute_input":"2024-08-11T10:10:55.321958Z","iopub.status.idle":"2024-08-11T10:10:55.327681Z","shell.execute_reply.started":"2024-08-11T10:10:55.321925Z","shell.execute_reply":"2024-08-11T10:10:55.326182Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"---\n## ‚û§ RATINGS FOR EACH CLASS ","metadata":{}},{"cell_type":"code","source":"# Isolate Seat Types\nbusiness = df[df['Seat Type'] == 'Business Class']\npremium = df[df['Seat Type'] == 'Premium Economy']\neconomy = df[df['Seat Type'] == 'Economy Class']","metadata":{"scrolled":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# BUSINESS\n# Count rating occurrences for business class\nbus_counts = business['Rating'].value_counts()\nbus_counts = pd.DataFrame(bus_counts)\n# Add column names\nbus_counts = bus_counts.reset_index()\nbus_counts.columns = ['Rating', 'Count']\n# Convert 'Rating' column to numeric type\nbus_counts['Rating'] = pd.to_numeric(bus_counts['Rating'])\nbus_counts = bus_counts.sort_values(by=['Rating'], ascending=False)\n\n# PREMIUM\n# Count rating occurrences for business class\nprem_counts = premium['Rating'].value_counts()\nprem_counts = pd.DataFrame(prem_counts)\n# Add column names\nprem_counts = prem_counts.reset_index()\nprem_counts.columns = ['Rating', 'Count']\n# Convert 'Rating' column to numeric type\nprem_counts['Rating'] = pd.to_numeric(prem_counts['Rating'])\nprem_counts = prem_counts.sort_values(by=['Rating'], ascending=False)\n\n# ECONOMY\n# Count rating occurrences for business class\neco_counts = economy['Rating'].value_counts()\neco_counts = pd.DataFrame(eco_counts)\n# Add column names\neco_counts = eco_counts.reset_index()\neco_counts.columns = ['Rating', 'Count']\n# Convert 'Rating' column to numeric type\neco_counts['Rating'] = pd.to_numeric(eco_counts['Rating'])\neco_counts = eco_counts.sort_values(by=['Rating'], ascending=False)","metadata":{"scrolled":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**ü§î If you have no idea what is going on, scroll down to the final graph and you'll get the idea. ü´°**","metadata":{}},{"cell_type":"code","source":"# Define function to categorize ratings\ndef categorize_rating(rating):\n    if 1 <= rating <= 3:\n        return 'Unhappy (1-3)'\n    elif 4 <= rating <= 6:\n        return 'Neutral (4-6)'\n    elif 7 <= rating <= 10:\n        return 'Happy (7-10)'\n    else:\n        return 'Other'\n\n# Apply the function to categorize ratings\nbus_counts['Category'] = bus_counts['Rating'].apply(categorize_rating) # Business\nprem_counts['Category'] = prem_counts['Rating'].apply(categorize_rating) # Premium\neco_counts['Category'] = eco_counts['Rating'].apply(categorize_rating) # Economy\n\n# Group by the new category and sum the counts\ngrouped_counts_bus = bus_counts.groupby('Category')['Count'].sum().reset_index() # Business\ngrouped_counts_prem = prem_counts.groupby('Category')['Count'].sum().reset_index() # Premium\ngrouped_counts_eco = eco_counts.groupby('Category')['Count'].sum().reset_index() # Economy","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Define softer colors for each category\ncolors = {'Happy (7-10)': '#63DF63',    # greenish\n          'Neutral (4-6)': '#659DE9',   # reddish\n          'Unhappy (1-3)': '#E96565'}   # bluish\n\n# Creating the pie charts\nfig, axes = plt.subplots(1, 3, figsize=(18, 6))\n\n# Business pie chart\nbus_colors = [colors.get(category, '#cccccc') for category in grouped_counts_bus['Category']]\naxes[0].pie(grouped_counts_bus['Count'], labels=grouped_counts_bus['Category'], colors=bus_colors, autopct='%1.1f%%')\naxes[0].set_title('Business', fontsize=16, y=1.05)\n\n# Premium pie chart\nprem_colors = [colors.get(category, '#cccccc') for category in grouped_counts_prem['Category']]\naxes[1].pie(grouped_counts_prem['Count'], labels=grouped_counts_prem['Category'], colors=prem_colors, autopct='%1.1f%%')\naxes[1].set_title('Premium', fontsize=16, y=1.05)\n\n# Economy pie chart\neco_colors = [colors.get(category, '#cccccc') for category in grouped_counts_eco['Category']]\naxes[2].pie(grouped_counts_eco['Count'], labels=grouped_counts_eco['Category'], colors=eco_colors, autopct='%1.1f%%')\naxes[2].set_title('Economy', fontsize=16, y=1.05)\n\n# Chart title\nfig.suptitle('RATINGS FOR EACH CLASS (2022 - 2024)', fontsize=16, y=1.05)\n\nplt.show()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**WOW who would have thought British Airways would have such terrible reviews!!** <br>(anyone who has flown with them obviously)","metadata":{}}]}